//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.6

use super::sea_orm_active_enums::DiscordSourceType;
use sea_orm::{entity::prelude::*, prelude::async_trait::async_trait, Set};
use uuid::Uuid;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "discord_source")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub discord_source_id: Uuid,
    pub server_name: String,
    pub channel_name: String,
    pub discord_server_id: i64,
    pub discord_channel_id: i64,
    pub is_active: bool,
    pub source_type: DiscordSourceType,
    pub source_config: Json,
    pub last_swept_at: DateTime,
    pub created_at: DateTime,
    pub updated_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

#[async_trait]
impl ActiveModelBehavior for ActiveModel {
    fn new() -> Self {
        Self {
            discord_source_id: Set(Uuid::new_v4()),
            last_swept_at: Set(now()),
            ..ActiveModelTrait::default()
        }
    }

    async fn before_save<C>(mut self, _db: &C, insert: bool) -> Result<Self, DbErr>
    where
        C: ConnectionTrait,
    {
        if insert {
            self.created_at = Set(now());
        }
        self.updated_at = Set(now());

        Ok(self)
    }
}

fn now() -> DateTime {
    let now = chrono::Utc::now();
    chrono::NaiveDateTime::new(now.date_naive(), now.time())
}
